<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发日志03-第一行代码</title>
      <link href="/2023/02/25/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9703-%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/02/25/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9703-%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="一、提要"><a href="#一、提要" class="headerlink" title="一、提要"></a>一、提要</h1><p>在本章节我们将在<code>Qing</code>上添加一些功能</p><ul><li>声明变量</li><li>变量的打印</li><li>类型推断</li></ul><p>而在本章节结束后，我们要达成的目标则是让如下的代码可以在<code>Qing</code>上运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var name=&quot;Qing&quot;  <br>print name <br>var year = 2023<br>print year <br></code></pre></td></tr></table></figure><h1 id="二、词法分析"><a href="#二、词法分析" class="headerlink" title="二、词法分析"></a>二、词法分析</h1><h2 id="2-1、词法规则定义"><a href="#2-1、词法规则定义" class="headerlink" title="2.1、词法规则定义"></a>2.1、词法规则定义</h2><p>上一章，我们阐述了一个编程语言的三个模块，自然先到我们面前的就是第一个模块<strong>词法分析器</strong>，想要重头实现一个词法分析器是很难的事，还好市面上这么多的编程语言也不是凭空出现的，前辈们的诞生也依靠了很多处理相关工作的工具，而这里我们将会用到一个叫做<a href="%22https://github.com/antlr/antlr4%22">antlr</a>的工具，它能够大大地减轻我们对于词法的分析工作<br>现在，我们先用<code>antlr</code>描述一下我们的规则，这些规则基本都是很容易看懂的，不过我也大概写了一些注释，需要特别注意的是<code>antlr</code>的规则编写和<code>java</code>一样每一行后需要跟一个<code>;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 定义语言名称<br>grammar Qing;<br><br>// 定义解析规则<br>// 根规则:所有的代码文本只有`variable`和`print`两种类型,EOF表示文件结束<br>compilationUnit : ( variable | print )* EOF;<br>// 声明赋值语句，例: var a = 5  <br>variable : VARIABLE ID EQUALS value;<br>// 打印语句，例: print a<br>print : PRINT ID ;<br>value : NUMBER | STRING ; //must be NUMBER or STRING value (defined below)<br><br>// 符号规则，代码切割为符号的规则<br>VARIABLE : &#x27;var&#x27; ;<br>PRINT : &#x27;print&#x27; ;<br>EQUALS : &#x27;=&#x27; ;<br>NUMBER : [0-9]+ ; // 数字<br>STRING : &#x27;&quot;&#x27;.*&#x27;&quot;&#x27; ; // &quot;任意值&quot;<br>ID : [a-zA-Z0-9]+ ; // 需要是字母和数字值<br>WS: [ \t\n\r]+ -&gt; skip ; // 用来过滤空行的特殊符号<br></code></pre></td></tr></table></figure><h2 id="2-2、代码生成"><a href="#2-2、代码生成" class="headerlink" title="2.2、代码生成"></a>2.2、代码生成</h2><p>规则就这样被我们定义好了，现在我们需要运行<code>antlr</code>来帮我们生成Java代码，<code>antlr</code>执行程序你可以在官网或者github发布页面下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">antlr Qing.g4<br></code></pre></td></tr></table></figure><p>不过我们是用IDEA来编写这个程序，更加方便的方式是使用<code>antlr</code>的插件来帮我们生成java代码<br>用插件的方式需要额外进行一些插件的配置<br><img src="http://rqukz9wi7.bkt.clouddn.com/lan_01.png" alt="插件配置.png"><br>配置好了，现在我们可以生成代码了，执行<code>Generate ANTLR Recognizer</code>后<code>antlr</code>会在指定目录生成很多类，这些代码可以放在那里暂时不要管，我们来检验一下我们定义的规则是否有效，可以依照下图操作<br><img src="http://rqukz9wi7.bkt.clouddn.com/lan_02.png" alt="可视化解析树.png"><br>解析树成功展示出来了，表明了我们规则没有问题</p><h1 id="三、解析、编译以及运行"><a href="#三、解析、编译以及运行" class="headerlink" title="三、解析、编译以及运行"></a>三、解析、编译以及运行</h1><h2 id="3-1、遍历解析树"><a href="#3-1、遍历解析树" class="headerlink" title="3.1、遍历解析树"></a>3.1、遍历解析树</h2><p>我们通过<code>antlr</code>工具生成了很多类，这里简单介绍一下</p><ul><li>QingLexer - 定义解析规则、符号</li><li>QingParser - 包含每个规则的解析器、标记信息和内部类。</li><li>QingListener - 解析访问节点监听器，用于添加节点访问的回调</li><li>QingBaseListener - QingListener的空实现</li><li>QingVisitor - 解析树访问器</li><li>QingBaseVisitor - QingBaseVisitor的空实现</li></ul><p>我们主要是使用<code>QingBaseListener</code>这个类来帮助我们对解析树进行遍历<br>这里我写了一个简易的监听器来监听赋值语句以及打印语句的解析，这里还没有涉及编译的细节，不过我们已经可以通过这个监听器把输入代码里的各项符号(<code>Token</code>)以及数值都拿到了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingTreeWalkListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QingBaseListener</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 定义上下文中的变量名</span><br><span class="hljs-comment">   */</span><br>  HashMap&lt;String,String&gt; variableMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exitVariable</span><span class="hljs-params">(QingParser.VariableContext ctx)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TerminalNode</span> <span class="hljs-variable">varName</span> <span class="hljs-operator">=</span> ctx.ID();<br>    <span class="hljs-keyword">final</span> QingParser.<span class="hljs-type">ValueContext</span> <span class="hljs-variable">varValue</span> <span class="hljs-operator">=</span> ctx.value();<br>    <span class="hljs-keyword">if</span>(varName !=<span class="hljs-literal">null</span>)&#123;<br>      <span class="hljs-keyword">if</span>(variableMap.containsKey(varName.getText()))&#123;<br>        log.error(<span class="hljs-string">&quot;你要定义变量&#123;&#125;，这个变量已经定义过了&quot;</span>,varName.getText());<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      variableMap.put(varName.getText(), varValue.getText());<br>      log.info(<span class="hljs-string">&quot;你定义了一个变量，变量名为&#123;&#125;，它的值为&#123;&#125;&quot;</span>,varName.getText(),varValue.getText());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exitPrint</span><span class="hljs-params">(QingParser.PrintContext ctx)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TerminalNode</span> <span class="hljs-variable">varName</span> <span class="hljs-operator">=</span> ctx.ID();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">printedVarNotDeclared</span> <span class="hljs-operator">=</span> !variableMap.containsKey(varName.getText());<br>    <span class="hljs-keyword">if</span>(printedVarNotDeclared)&#123;<br>      log.error(<span class="hljs-string">&quot;你要打印的变量&#123;&#125;从未定义过&quot;</span>,varName.getText());<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;你要打印一个变量,变量名为&#123;&#125;,实际值为&#123;&#125;&quot;</span>,varName.getText(),variableMap.get(varName.getText()));<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>监听器实现了之后，就可以实际地使用它了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyntaxTreeTraverser</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析代码，并执行回调函数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(String code)</span>&#123;<br>      <span class="hljs-type">CodePointCharStream</span> <span class="hljs-variable">codePointCharStream</span> <span class="hljs-operator">=</span> CharStreams.fromString(code);<br>      <span class="hljs-type">QingLexer</span> <span class="hljs-variable">qingLexer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingLexer</span>(codePointCharStream);<br>      <span class="hljs-type">CommonTokenStream</span> <span class="hljs-variable">tokenStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonTokenStream</span>(qingLexer);<br>      <span class="hljs-type">QingParser</span> <span class="hljs-variable">qingParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingParser</span>(tokenStream);<br>      <span class="hljs-type">QingTreeWalkListener</span> <span class="hljs-variable">qingTreeWalkListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkListener</span>();<br>      <span class="hljs-type">QingTreeWalkErrorListener</span> <span class="hljs-variable">qingTreeWalkErrorListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkErrorListener</span>();<br>      qingParser.addParseListener(qingTreeWalkListener);<br>      qingParser.addErrorListener(qingTreeWalkErrorListener);<br>      qingParser.compilationUnit();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我还为它写了一个解析失败的监听器</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingTreeWalkErrorListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseErrorListener</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">syntaxError</span><span class="hljs-params">(Recognizer&lt;?, ?&gt; recognizer, Object offendingSymbol, <span class="hljs-type">int</span> line, <span class="hljs-type">int</span> charPositionInLine, String msg, RecognitionException e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;第&#123;&#125;行不符合语法规则,详情如下\n&#123;&#125;&quot;</span>,line,msg);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>现在可以把测试代码跑起来试试了，我写了一个<code>QingCompiler</code>作为编译器的入口程序，他后续会成为编译器的主体，当然它现在只是为我们来简单测试一下解析树的遍历效果</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingCompiler</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingCompiler</span>().compile(args);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compile</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <br>      <span class="hljs-string">&quot;var name=\&quot;Qing\&quot; &quot;</span> +<br>        <span class="hljs-string">&quot;var year = 2023 &quot;</span> +<br>        <span class="hljs-string">&quot;print name &quot;</span> +<br>        <span class="hljs-string">&quot;print year  &quot;</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyntaxTreeTraverser</span>().parse(code);<br>  &#125;<br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们来测试一下下面这段示例</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;Qing&quot;</span>  <br>print name <br><span class="hljs-type">var</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">2023</span><br>print year <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">你定义了一个变量，变量名为name，它的值为&quot;Qing&quot;<br>你定义了一个变量，变量名为year，它的值为2023<br>你要打印一个变量,变量名为name,实际值为&quot;Qing&quot;<br>你要打印一个变量,变量名为year,实际值为2023<br></code></pre></td></tr></table></figure><p>除此之外，它还可以输出解析异常的情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">第1行不符合语法规则,详情如下<br>mismatched input &#x27;String&#x27; expecting &#123;&lt;EOF&gt;, &#x27;var&#x27;, &#x27;print&#x27;&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2、生成字节码"><a href="#3-2、生成字节码" class="headerlink" title="3.2、生成字节码"></a>3.2、生成字节码</h2><p>我们已经成功遍历了语法解析树，下一步就是要用这棵树来形成字节码文件了，<code>Qing</code>是一个JVM语言，换言之，我们要生成<code>.class</code>字节码文件<br>如果你对java虚拟机比较了解，你也许知道<code>.class</code>文件是由一组指令构成，而每一个指令都包含：</p><ul><li>一个字节长度、代表着某种特定操作含义的数字 - 操作码(Opcode)</li><li>零至多个代表此操作所需参数 - 操作数(Operands)</li></ul><h3 id="3-2-1、ASM"><a href="#3-2-1、ASM" class="headerlink" title="3.2.1、ASM"></a>3.2.1、ASM</h3><p><a href="https://so.csdn.net/so/search?q=ASM&spm=1001.2101.3001.7020">ASM</a>是一种通用Java字节码操作和分析框架。它可以用于修改现有的class文件或动态生成class文件，我们利用这个工具来生成我们想要的字节码文件</p><h3 id="3-2-2、指令组定义"><a href="#3-2-2、指令组定义" class="headerlink" title="3.2.2、指令组定义"></a>3.2.2、指令组定义</h3><p>通过<code>ASM</code>生成字节码，我们需要先将代码转换为一组指令(<code>Instruction</code>)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 指令接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Instruction</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(MethodVisitor methodVisitor)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 变量定义指令</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDeclarationInstruction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Instruction</span>, Opcodes &#123;<br>    Variable variable;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">VariableDeclarationInstruction</span><span class="hljs-params">(Variable variable)</span> &#123;<br>        <span class="hljs-built_in">this</span>.variable = variable;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(MethodVisitor mv)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> variable.getType();<br>        <span class="hljs-keyword">if</span>(type == QingLexer.NUMBER) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Integer.parseInt(variable.getValue());<br>            mv.visitIntInsn(SIPUSH,val);<br>            mv.visitVarInsn(ISTORE,variable.getId());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type == QingLexer.STRING) &#123;<br>            mv.visitLdcInsn(variable.getValue());<br>            mv.visitVarInsn(ASTORE,variable.getId());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 打印变量指令</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintVariableInstruction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Instruction</span>, Opcodes &#123;<br>    Variable variable;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PrintVariableInstruction</span><span class="hljs-params">(Variable variable)</span> &#123;<br>        <span class="hljs-built_in">this</span>.variable = variable;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(MethodVisitor mv)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> variable.getType();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> variable.getId();<br>        mv.visitFieldInsn(GETSTATIC, <span class="hljs-string">&quot;java/lang/System&quot;</span>, <span class="hljs-string">&quot;out&quot;</span>, <span class="hljs-string">&quot;Ljava/io/PrintStream;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (type == QingLexer.NUMBER) &#123;<br>            mv.visitVarInsn(ILOAD, id);<br>            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="hljs-string">&quot;java/io/PrintStream&quot;</span>, <span class="hljs-string">&quot;println&quot;</span>, <span class="hljs-string">&quot;(I)V&quot;</span>, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == QingLexer.STRING) &#123;<br>            mv.visitVarInsn(ALOAD, id);<br>            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="hljs-string">&quot;java/io/PrintStream&quot;</span>, <span class="hljs-string">&quot;println&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TODO-加一些解释"><a href="#TODO-加一些解释" class="headerlink" title="TODO:加一些解释"></a>TODO:加一些解释</h3><h3 id="3-2-3、指令组装"><a href="#3-2-3、指令组装" class="headerlink" title="3.2.3、指令组装"></a>3.2.3、指令组装</h3><p>我们目前实际是实现了，变量的声明以及变量的打印功能，为此我们先引入一个实体，来表明我们的变量信息</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Variable</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> type;<br>  <span class="hljs-keyword">private</span> String value;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再将之前的监听器调整一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingTreeWalkListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QingBaseListener</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 定义上下文中的变量名</span><br><span class="hljs-comment">   */</span><br>  Map&lt;String, Variable&gt; variableMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>  Queue&lt;Instruction&gt; instructionsQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exitVariable</span><span class="hljs-params">(QingParser.VariableContext ctx)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TerminalNode</span> <span class="hljs-variable">varName</span> <span class="hljs-operator">=</span> ctx.ID();<br>    <span class="hljs-keyword">final</span> QingParser.<span class="hljs-type">ValueContext</span> <span class="hljs-variable">varValue</span> <span class="hljs-operator">=</span> ctx.value();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">varType</span> <span class="hljs-operator">=</span> varValue.getStart().getType();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">varIndex</span> <span class="hljs-operator">=</span> variableMap.size();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">varTextValue</span> <span class="hljs-operator">=</span> varValue.getText();<br>    <span class="hljs-type">Variable</span> <span class="hljs-variable">var</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Variable</span>(varIndex, varType, varTextValue);<br>    <span class="hljs-keyword">if</span> (variableMap.containsKey(varName.getText())) &#123;<br>      log.error(<span class="hljs-string">&quot;你要定义变量&#123;&#125;，这个变量已经定义过了&quot;</span>, varName.getText());<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    variableMap.put(varName.getText(), <span class="hljs-keyword">var</span>);<br>    instructionsQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableDeclarationInstruction</span>(<span class="hljs-keyword">var</span>));<br>    log.info(<span class="hljs-string">&quot;你定义了一个变量，变量名为&#123;&#125;，它的值为&#123;&#125;&quot;</span>, varName.getText(), varValue.getText());<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exitPrint</span><span class="hljs-params">(QingParser.PrintContext ctx)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TerminalNode</span> <span class="hljs-variable">varName</span> <span class="hljs-operator">=</span> ctx.ID();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">printedVarNotDeclared</span> <span class="hljs-operator">=</span> !variableMap.containsKey(varName.getText());<br>    <span class="hljs-keyword">if</span> (printedVarNotDeclared) &#123;<br>      log.error(<span class="hljs-string">&quot;你要打印的变量&#123;&#125;从未定义过&quot;</span>, varName.getText());<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Variable</span> <span class="hljs-variable">variable</span> <span class="hljs-operator">=</span> variableMap.get(varName.getText());<br>    instructionsQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintVariableInstruction</span>(variable));<br>    log.info(<span class="hljs-string">&quot;你要打印一个变量,变量名为&#123;&#125;,实际值为&#123;&#125;&quot;</span>, varName.getText(), variableMap.get(varName.getText()));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Queue&lt;Instruction&gt; <span class="hljs-title function_">getInstructionsQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> instructionsQueue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历器也补充一个方法，获取指令队列</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 语法树遍历器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyntaxTreeTraverser</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指令集</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Queue&lt;Instruction&gt; <span class="hljs-title function_">getInstructions</span><span class="hljs-params">(String code)</span> &#123;<br>    <span class="hljs-type">CodePointCharStream</span> <span class="hljs-variable">codePointCharStream</span> <span class="hljs-operator">=</span> CharStreams.fromString(code);<br>    <span class="hljs-type">QingLexer</span> <span class="hljs-variable">qingLexer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingLexer</span>(codePointCharStream);<br>    <span class="hljs-type">CommonTokenStream</span> <span class="hljs-variable">tokenStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonTokenStream</span>(qingLexer);<br>    <span class="hljs-type">QingParser</span> <span class="hljs-variable">qingParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingParser</span>(tokenStream);<br>    <span class="hljs-type">QingTreeWalkListener</span> <span class="hljs-variable">qingTreeWalkListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkListener</span>();<br>    <span class="hljs-type">QingTreeWalkErrorListener</span> <span class="hljs-variable">qingTreeWalkErrorListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkErrorListener</span>();<br>    qingParser.addParseListener(qingTreeWalkListener);<br>    qingParser.addErrorListener(qingTreeWalkErrorListener);<br>    qingParser.compilationUnit();<br>    <span class="hljs-keyword">return</span> qingTreeWalkListener.getInstructionsQueue();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-4、生成字节码"><a href="#3-2-4、生成字节码" class="headerlink" title="3.2.4、生成字节码"></a>3.2.4、生成字节码</h3><p>最后再调整一下编译器的代码，生成class文件</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingCompiler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingCompiler</span>().compile(args);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compile</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-string">&quot;var name=\&quot;Qing\&quot; &quot;</span> +<br>            <span class="hljs-string">&quot;var year = 2023 &quot;</span> +<br>            <span class="hljs-string">&quot;print name &quot;</span> +<br>            <span class="hljs-string">&quot;print year  &quot;</span>;<br>        <span class="hljs-keyword">final</span> Queue&lt;Instruction&gt; instructions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyntaxTreeTraverser</span>().getInstructions(code);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] byteCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BytecodeGenerator</span>().generateBytecode(instructions, <span class="hljs-string">&quot;first&quot;</span>);<br>        writeBytecodeToClassFile(<span class="hljs-string">&quot;first.class&quot;</span>, byteCode);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeBytecodeToClassFile</span><span class="hljs-params">(String fileName, <span class="hljs-type">byte</span>[] byteCode)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> Files.newOutputStream(Paths.get(fileName));<br>        os.write(byteCode);<br>        os.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3、运行第一个Qing代码"><a href="#3-3、运行第一个Qing代码" class="headerlink" title="3.3、运行第一个Qing代码"></a>3.3、运行第一个Qing代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">var name=&quot;Qing&quot;  <br>print name <br>var year = 2023<br>print year <br></code></pre></td></tr></table></figure><p>我们在项目根目录成功生成了<code>first.class</code>文件，再运行一下看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$java</span> first<br><span class="hljs-string">&quot;Qing&quot;</span><br>2023<br></code></pre></td></tr></table></figure><h1 id="四、独立出来"><a href="#四、独立出来" class="headerlink" title="四、独立出来"></a>四、独立出来</h1><p>现在我们的代码成功运行了，不过在实际写代码的时候可没办法把代码写在<code>main</code>方法里直接跑😂，当然，我们要把代码抽离出来，每个代码片段应该都是一个文件，文件后缀是什么呢，当然就是<code>qing</code>了<br>我们的编译器代码也需要改一下，它需要调整为接收一个文件路径</p><ul><li>调整后的代码<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QingCompiler</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingCompiler</span>().compile(args);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compile</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">qingFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> qingFile.getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileAbsolutePath</span> <span class="hljs-operator">=</span> qingFile.getAbsolutePath();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> StringUtils.remove(fileName, <span class="hljs-string">&quot;.qing&quot;</span>);<br>    <span class="hljs-keyword">final</span> Queue&lt;Instruction&gt; instructions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyntaxTreeTraverser</span>().getInstructions(fileAbsolutePath);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] byteCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BytecodeGenerator</span>().generateBytecode(instructions, className);<br>    writeBytecodeToClassFile(fileAbsolutePath, byteCode);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeBytecodeToClassFile</span><span class="hljs-params">(String fileName, <span class="hljs-type">byte</span>[] byteCode)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">classFile</span> <span class="hljs-operator">=</span> StringUtils.replace(fileName, <span class="hljs-string">&quot;.qing&quot;</span>, <span class="hljs-string">&quot;.class&quot;</span>);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> Files.newOutputStream(Paths.get(classFile));<br>    os.write(byteCode);<br>    os.close();<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 语法树遍历器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyntaxTreeTraverser</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指令集</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileAbsolutePath</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Queue&lt;Instruction&gt; <span class="hljs-title function_">getInstructions</span><span class="hljs-params">(String fileAbsolutePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">CharStream</span> <span class="hljs-variable">charStream</span> <span class="hljs-operator">=</span> CharStreams.fromFileName(fileAbsolutePath);<br>    <span class="hljs-type">QingLexer</span> <span class="hljs-variable">qingLexer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingLexer</span>(charStream);<br>    <span class="hljs-type">CommonTokenStream</span> <span class="hljs-variable">tokenStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonTokenStream</span>(qingLexer);<br>    <span class="hljs-type">QingParser</span> <span class="hljs-variable">qingParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingParser</span>(tokenStream);<br>    <span class="hljs-type">QingTreeWalkListener</span> <span class="hljs-variable">qingTreeWalkListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkListener</span>();<br>    <span class="hljs-type">QingTreeWalkErrorListener</span> <span class="hljs-variable">qingTreeWalkErrorListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QingTreeWalkErrorListener</span>();<br>    qingParser.addParseListener(qingTreeWalkListener);<br>    qingParser.addErrorListener(qingTreeWalkErrorListener);<br>    qingParser.compilationUnit();<br>    <span class="hljs-keyword">return</span> qingTreeWalkListener.getInstructionsQueue();<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 动手写编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发日志02：预期工作</title>
      <link href="/2023/02/21/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9702-%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/"/>
      <url>/2023/02/21/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9702-%E9%A2%84%E6%9C%9F%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="完成一个编程语言需要做什么？"><a href="#完成一个编程语言需要做什么？" class="headerlink" title="完成一个编程语言需要做什么？"></a>完成一个编程语言需要做什么？</h2><p>我们把整个编程语言的工作抽象一下，编程语言需要干什么？</p><ul><li>我们在一个文本中写了几行代码，然后通过编译器将它编译成了字节码文件去执行，那么我们的工作其实就是要把文本转化为字节码，说起来很轻松，但是实际上需要解决很多问题</li></ul><p>在实际的实现中，我们大致可以分为三个部分</p><table><thead><tr><th>模块</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>词法分析器(Lexer)</td><td>代码(纯文本)</td><td>符号群(Tokens)</td></tr><tr><td>解析器(Parser)</td><td>符号群(Tokens)</td><td>抽象语法树(AST)</td></tr><tr><td>编译器(Compiler)</td><td>抽象语法树(AST)</td><td>字节码文件</td></tr></tbody></table><p>这几个模块或许你们还并不熟悉，这些部分有些需要我们手撸代码，有些则是有现成的工具可以利用，相关的概念网上可以查到很多详细的资料，我们这边不会进行详细的解释，实际上你也并不需要了解这些东西到底是什么，在我们实现它的时候，你就会自然而然地了解<br>虽说如此，我们还是有必要通过一个例子来解释整个过程</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="mermaid">graph LR        A["        Input Code<br /><br />        int x=a*5+2;        "]        B["          Tokens<br /><br />{type,int},          <br />{identifier,x}          <br />{operator,=}          <br />{identifier,a}          <br />{operator,#42;}          <br />{number,5}          <br />{operator,+}          <br />{number,2}          <br />{keyword,;}          "]          A-->|LEXER|B          B-->|PARSER|EQUALS        subgraph Abstract Syntax Tree        EQUALS["="]        VARX["x"]        VARA["a"]        MULTIPLY["#42;"]        PLUS["+"]        FIVE[5]        TWO[2]        EQUALS---PLUS        EQUALS---VARX        PLUS---TWO        PLUS---MULTIPLY        MULTIPLY---FIVE        MULTIPLY---VARA        end</pre><p>词法分析器接受文本输入并将其每个词标记出来，代码于是变成了一个符号列表。符号还与有助于进一步分析的类型相关联。<br>符号被传递给解析器，解析器负责将符号组织成称为<strong>抽象语法树的</strong>层次结构。树决定了代码的执行顺序。Compiler 编译器遍历树并将其映射为有效的字节码指令</p>]]></content>
      
      
      <categories>
          
          <category> 动手写编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发日志01：创建一个新的编程语言</title>
      <link href="/2023/02/17/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9701_%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/02/17/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9701_%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>我打算开始从零开始编写一个编程语言，因为我的主编程语言是Java，所以我打算做一个类似kotlin或者scala的jvm语言，这有一个好处，那就是这个语言诞生之初就可以调用很多Java的库，相当于为它赋予了一定的生产能力，当然这个语言并不一定要有实际价值，不过创建语言的这个过程一定会很有意义<br>为什么选择做JVM语言 ：</p><ul><li>我熟悉Java，用Java来编写我会更加上手</li><li>JVM 语言可以相互混合，像kotlin也是可以调用java库的</li><li>Java有些方面需要优化，相对于一些其它的编程语言，Java的语法相对更加臃肿(虽然Java新特性一直在持续引入语法糖来改进这些问题)</li></ul><p>目标是做到什么程度：</p><ul><li>这个语言会有一个独立的文件后缀</li><li>可以编写实际的应用程序</li><li>可能会针对某些IDE做一些特定语法高亮的支持插件，使它更像样</li><li>如果可以在某些方面能比用Java来编写程序更有效率那就更好了</li></ul><p>好了，现在先给这个编程语言起个名字吧，起名总是一件很困难的事，当然我们可以用一些工具来随机一个名字出来 <a href="https://www.namegenerators.me/software-names/678/">https://www.namegenerators.me/software-names/678/</a></p><p>不过我最终没有这么做，它最终取名叫做Qing，因为这只是一个玩具语言，肯定会比已经发展了很久的语言老前辈轻量，另外它设计之初也是希望用起来很轻便</p>]]></content>
      
      
      <categories>
          
          <category> 动手写编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
